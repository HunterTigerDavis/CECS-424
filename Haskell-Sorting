import Data.List
import System.IO
{-
Author: Hunter Davis
CECS 424
-}
--module Main where
-- pass this var list into function qsort and msort to give correct values
toSort = [4,65,2,-31,0,99,2,83,782,1,0]


-- Function: qsort quick sorts a list recursively with n log n efficiency using a pivot
qsort :: Ord a => [a] -> [a] -- quick sort a list in Haskell
qsort [] = []-- empty input = empty output
-- This takes a list with x:xs elements in it, and recursively calls qsort on the sub lists less than and greater than the pivot 
qsort (x:xs) = (qsort lessThanPivot) ++ [x] ++ (qsort greaterThanPivot) -- appends the recursive call of left side, the pivot, and the recursive call of right side
  where -- Defining our vars lessThanPivot and greaterThanPivot, sorting into those by comparing to pivot
    -- iterates and takes y from xs, those that are less than pivot (also x, our first element) and put in lessThanPivot
    lessThanPivot = [y | y <- xs, y < x]
    -- iterates and takes y from xs, those that are greater or = to pivot (also x, our first element) and put in greaterThanPivot
    greaterThanPivot = [y | y <- xs, y >= x]


-- OLD CODE, not used currently: Re-written in one line of msort function (Within the "where")
-- Function: halveList splits the list into a tuple of the first half and the last half
-- Defining the return type as tuple of list elements
halveList :: [a] -> ([a],[a])
-- sets the tuple result to the first half of the list, and then what's returned after the first half are dropped
halveList x = (take halfOf x, drop halfOf x)
  -- Assigning halfOf variable to half the length of the array (with safe integer division)
  where halfOf = length x `div` 2


-- Function: mergeLists cons' two lists togther based on: lesser one is first
-- Defining return type as a list 
mergeLists :: Ord a => [a] -> [a] -> [a]
-- Next two lines deal with merging an empty list with a non-empty list, just returns the existing list
mergeLists [] ys = ys -- left list empty: return right
mergeLists xs [] = xs -- right list empty: return left
mergeLists (x:xs) (y:ys) -- if we have two lists with multiple elements:
  -- Pop lesser starting value out and cons to right side a recursive call function on remaining lists
  | x < y = x : mergeLists xs (y:ys)
  | otherwise = y : mergeLists (x:xs) ys

  

-- Function: msort merge sorts a list recursively with (hopefully) best efficiency by splitting lists in half
msort :: Ord a => [a] -> [a]
msort [] = [] -- empty input = empty output
msort [x] = [x] -- singleton input = singleton output, it's already trivially sorted
-- when given an input of a list with 2+ values:
-- call mergelists of the two halves of the list recursively called by msort 
msort xs = mergeLists (msort leftHalf) (msort rightHalf)
           -- defining tuple of two halves as result of halveList function, re-written logic from halveList into where clause:
           where (leftHalf, rightHalf) = (take (length (xs) `div` 2) xs, drop (length (xs) `div` 2) xs) -- halveList xs
 
main = do
  putStrLn "Unsorted"
  print toSort
  putStrLn "Quicksort: "
  let resultq = qsort toSort
  print(resultq)
  putStrLn "Mergesort: "
  let resultm = msort toSort
  print(resultm)
